<?php

/**
 * @file
 * The Commerce Invoice module.
 */

/**
 * Implements hook_entity_info().
 */
function commerce_invoice_entity_info() {
  $entities = array();

  $entities['commerce_invoice'] = array(
    'label' => t('Commerce Invoice'),
    'base table' => 'commerce_invoice',
    'revision table' => 'commerce_invoice_revision',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'invoice_id',
      'bundle' => 'type',
      'revision' => 'revision_id',
    ),
    'bundles' => array(
      'commerce_invoice' => array(
        'label' => t('Invoice'),
      ),
    ),
    'entity class' => '\\Drupal\\commerce_invoice\\Entity\\Invoice',
    'controller class' => '\\Drupal\\commerce_invoice\\Entity\\InvoiceController',
    'metadata controller class' => '\\Drupal\\commerce_invoice\\Entity\\InvoiceMetadataController',
    'views controller class' => 'EntityDefaultViewsController',
    'access callback' => 'commerce_entity_access',
    'access arguments' => array(
      'user key' => 'uid',
      'access tag' => 'commerce_invoice_access',
    ),
    'permission labels' => array(
      'singular' => t('invoice'),
      'plural' => t('invoices'),
    ),
  );

  $entities['commerce_invoice_number_pattern'] = array(
    'label' => t('Invoice number pattern'),
    'base table' => 'commerce_invoice_number_pattern',
    'controller class' => 'EntityAPIControllerExportable',
    'entity class' => '\\Drupal\\commerce_invoice\\Entity\\InvoiceNumberPattern',
    'entity keys' => array(
      'id' => 'name',
      'name' => 'name',
      'label' => 'label',
      'status' => 'status',
    ),
    'exportable' => TRUE,
    'module' => 'commerce_invoice',
    'access callback' => 'commerce_invoice_number_pattern_access',
    'admin ui' => array(
      'path' => 'admin/commerce/config/invoice-numbers',
      'file' => 'includes/commerce_invoice.admin.inc',
    ),
  );

  return $entities;
}

/**
 * @return bool
 */
function commerce_invoice_number_pattern_access() {
  return user_access('administer commerce_invoice entities');
}

/**
 * Checks invoice access for various operations.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param object|NULL $invoice
 *   Optionally an invoice to check access for.
 * @param object|NULL $account
 *   The user to check for. Leave it to NULL to check for the current user.
 * 
 * @return bool
 */
function commerce_invoice_access($op, $invoice = NULL, $account = NULL) {
  return commerce_entity_access($op, $invoice, $account, 'commerce_invoice');
}

/**
 * Implements hook_query_commerce_order_access_alter().
 */
function commerce_invoice_query_commerce_invoice_access_alter(QueryAlterableInterface $query) {
  commerce_entity_access_query_alter($query, 'commerce_invoice');
}

/**
 * Implements hook_permission().
 */
function commerce_invoice_permission() {
  return commerce_entity_access_permissions('commerce_invoice');
}

/**
 * A list of invoice statuses.
 *
 * @return string<string>
 *   Invoice statuses keyed by their machine name.
 */
function commerce_invoice_statuses() {
  $statuses = array(
    'pending' => t('Pending payment'),
    'paid' => t('Paid'),
    // @todo canceled, etc.
  );

  drupal_alter(__FUNCTION__, $statuses);

  return $statuses;
}

/**
 * Returns a list of invoice number strategies.
 *
 * @return \Drupal\commerce_invoice\InvoiceNumber\Strategy\StrategyInterface[]
 *   An array of invoice number strategies, keyed by name.
 */
function commerce_invoice_number_strategies() {
  $strategies = array();

  foreach (entity_load('commerce_invoice_number_pattern') as $pattern) {
    $strategies[$pattern->name] = new \Drupal\commerce_invoice\InvoiceNumber\Strategy\Pattern($pattern);
  }

  return $strategies;
}

/**
 * Load an invoice number pattern by machine name.
 *
 * @param string $name
 *
 * @return \Drupal\commerce_invoice\Entity\InvoiceNumberPattern|FALSE
 */
function commerce_invoice_number_pattern_load($name) {
  $patterns = entity_load_multiple_by_name('commerce_invoice_number_pattern', [$name]);

  return reset($patterns);
}

/**
 * Implements hook_default_commerce_invoice_number_pattern().
 */
function commerce_invoice_default_commerce_invoice_number_pattern() {
  $entity_type = 'commerce_invoice_number_pattern';
  $patterns = array();

  $patterns['consecutive'] = entity_create($entity_type, [
    'name' => 'consecutive',
    'label' => 'Consecutive',
    'pattern' => '',
  ]);

  $patterns['daily'] = entity_create($entity_type, [
    'name' => 'daily',
    'label' => 'Daily',
    'pattern' => '[date:custom:Y]-[date:custom:m]-[date:custom:d]',
  ]);

  $patterns['monthly'] = entity_create($entity_type, [
    'name' => 'monthly',
    'label' => 'Monthly',
    'pattern' => '[date:custom:Y]-[date:custom:m]',
  ]);

  $patterns['yearly'] = entity_create($entity_type, [
    'name' => 'yearly',
    'label' => 'Yearly',
    'pattern' => '[date:custom:Y]',
  ]);

  return $patterns;
}

/**
 * Implements hook_theme().
 */
function commerce_invoice_theme() {
  return array(
    'commerce_invoice_number' => array(
      'variables' => array(
        'invoice_number' => NULL,
        'pattern' => NULL,
        'sequence' => NULL,
      ),
      'file' => 'includes/commerce_invoice.theme.inc',
    ),
  );
}
