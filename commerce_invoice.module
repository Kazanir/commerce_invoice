<?php

/**
 * @file
 * The Commerce Invoice module.
 */

/**
 * Implements hook_entity_info().
 */
function commerce_invoice_entity_info() {
  $entities = array();

  $entities['commerce_invoice'] = array(
    'label' => t('Commerce Invoice'),
    'base table' => 'commerce_invoice',
    'revision table' => 'commerce_invoice_revision',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'invoice_id',
      'bundle' => 'type',
      'revision' => 'revision_id',
    ),
    'bundles' => array(
      'commerce_invoice' => array(
        'label' => t('Invoice'),
      ),
    ),
    'entity class' => '\\Drupal\\commerce_invoice\\Entity\\Invoice',
    'controller class' => '\\Drupal\\commerce_invoice\\Entity\\InvoiceController',
    'metadata controller class' => '\\Drupal\\commerce_invoice\\Entity\\InvoiceMetadataController',
    'views controller class' => 'EntityDefaultViewsController',
    'access callback' => 'commerce_entity_access',
    'access arguments' => array(
      'user key' => 'uid',
      'access tag' => 'commerce_invoice_access',
    ),
    'permission labels' => array(
      'singular' => t('invoice'),
      'plural' => t('invoices'),
    ),
  );

  return $entities;
}

/**
 * Checks invoice access for various operations.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param object|NULL $invoice
 *   Optionally an invoice to check access for.
 * @param object|NULL $account
 *   The user to check for. Leave it to NULL to check for the current user.
 * 
 * @return bool
 */
function commerce_invoice_access($op, $invoice = NULL, $account = NULL) {
  return commerce_entity_access($op, $invoice, $account, 'commerce_invoice');
}

/**
 * Implements hook_query_commerce_order_access_alter().
 */
function commerce_invoice_query_commerce_invoice_access_alter(QueryAlterableInterface $query) {
  commerce_entity_access_query_alter($query, 'commerce_invoice');
}

/**
 * Implements hook_permission().
 */
function commerce_invoice_permission() {
  return commerce_entity_access_permissions('commerce_invoice');
}

/**
 * A list of invoice statuses.
 *
 * @return string<string>
 *   Invoice statuses keyed by their machine name.
 */
function commerce_invoice_statuses() {
  $statuses = array(
    'pending' => t('Pending payment'),
    'paid' => t('Paid'),
    // @todo canceled, etc.
  );

  drupal_alter(__FUNCTION__, $statuses);

  return $statuses;
}

/**
 * Returns a list of invoice number strategies.
 *
 * @return \Drupal\commerce_invoice\InvoiceNumber\Strategy\StrategyInterface[]
 */
function commerce_invoice_number_strategies() {
  $strategies = array(
    new \Drupal\commerce_invoice\InvoiceNumber\Strategy\Consecutive(),
    new \Drupal\commerce_invoice\InvoiceNumber\Strategy\Daily(),
    new \Drupal\commerce_invoice\InvoiceNumber\Strategy\Monthly(),
    new \Drupal\commerce_invoice\InvoiceNumber\Strategy\Yearly(),
  );
  drupal_alter(__FUNCTION__, $strategies);

  return $strategies;
}
